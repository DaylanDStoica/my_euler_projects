# Euler Problem #44

#Pentagon numbers:
# P(n) = n*(3*n-1)/2 

# Pentagonal numbers are generated by the formula, 
# . The first ten pentagonal numbers are:

# It can be seen that P4 + P7 = 22+70=92=P8
# . However, their difference, 70-22=48 
# , is not pentagonal.

# TASK: 
# Find the pair of pentagonal numbers, P(j) and P(k), 
# for which their sum and difference are pentagonal and    D = | Pk - Pj |  is minimised; 
# what is the value of  D ?

def get_penta_num ( num ):
    # return the pentagonal number generated from the given parameter
    return num*( 3*num - 1) / 2

from math import sqrt
def is_penta_num ( num):
    # check that the given parameter is pentagonal
    # method: invert the pentagonal equation, and if an integer comes out, is True
    # else: return False


    
    # Done: develop inverted formula, completed
    # from original   P(x) = (3x*x - x) / 2
    # inverse of Pentagonal number ( P^-1(x) ) = 1/6 * ( 1 +- sqrt ( 24*x + 1 ) )

    # with some insight, the domain of valid Pentagonal numbers is determined by the square-root portion of the inverse equation.
    # With the provided example numbers and testings, so long as the number inputed into the square-root expression results in a positive integer, the given number will be pentagonal.

    square_root_result = sqrt( 24*num + 1)

    if ( type( square_root_result) == int and ( square_root_result >= 0) ): # the square root is positive integer
        return True

    return False


def test_main():
    for x in range( 1, 100):
        temp_pent = get_penta_num(x)
        print(" testing input integer %i with given pentagonal output %i", x, temp_pent)

        if ( is_penta_num( temp_pent) ):
            print( " %i is a pentagonal number", temp_pent)
        else:
            print(" somehow (???)   %i is not pentagonal, note this error", temp_pent)

        if ( is_penta_num ( x)):
            print( " %i is a pentagonal number", x)
        else: 
            print(" %i is not pentagonal ", x)

        print("/n")

test_main()