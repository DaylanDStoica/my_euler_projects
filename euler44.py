# Euler Problem #44

#Pentagon numbers:
# P(n) = n*(3*n-1)/2 

# Pentagonal numbers are generated by the formula, 
# . The first ten pentagonal numbers are:

# It can be seen that P4 + P7 = 22+70=92=P8
# . However, their difference, 70-22=48 
# , is not pentagonal.

# TASK: 
# Find the pair of pentagonal numbers, P(j) and P(k), 
# for which their sum and difference are pentagonal and    D = | Pk - Pj |  is minimised; 
# what is the value of  D ?

def get_pentagon_num ( n = 1):
    # return the pentagon number, at the designated index
    return n*(3*n - 1) /2


def is_number_pentagon( integer1 = 1):
    # return boolean
    # checking that the input integer is a pentagon number
    m = integer1  # given that integer1 is a pentagon number
    # m = n*(3n-1)/2
    # 2m = n(3n-1) = 3n*n - n
    # pent_list = []
    # for i in range( 0, integer1):
    #     pent_list.append( get_pentagon_num(i) )
    #     print( i)
    # print(pent_list)
    i = 1
    while( get_pentagon_num(i) <= m):
        if ( m == get_pentagon_num(i) ):
            print( m , " is a pentagon number")
            return True
        i += 1
    # print( m , " is not a pentagon number")
    return False

# is_number_pentagon(15)
def check_pentagon_difference( j = 1, k = 1):
    pent_k = get_pentagon_num(k)
    pent_j = get_pentagon_num(j)
    diff_jk = int( abs( pent_k - pent_j) )
    return ( is_number_pentagon( diff_jk) )

def check_pentagon_sum ( j=1, k=1):
    pent_k = get_pentagon_num(k)
    pent_j = get_pentagon_num(j)
    sum_jk = int( abs( pent_k + pent_j) )
    return ( is_number_pentagon ( sum_jk ) )


def test():
    for i in range( 1, 10):
        curr_pent = get_pentagon_num(i)
        is_number_pentagon( int( curr_pent ) )
        is_number_pentagon( int( curr_pent) + 1)

# test()

def main():
    upper_limit = 500*2
    lower_limit = 2
    for i in range( lower_limit, upper_limit):
        for j in range( i, upper_limit):
            if ( check_pentagon_difference(i,j) ):
                print(i, "&",j, " have a valid pentagon difference")
            if ( check_pentagon_sum ( i,j) ):
                print( i, "&",j, " have a valid pentagon sum")
            if ( check_pentagon_difference(i,j) and ( check_pentagon_sum(i,j) ) ):
                print( i, "&", j, " have a valid sum and difference")
                return True
    print( "no valid nubmers within the range")
    return False


# main()


# given solution by Euler
#Project Euler Problem 44
def pe44():
    ps = set() # create an object for holding what exists
    i = 1000 # starting at the pentagonal number index 1000
    while True:
        i += 1
        s = (3*i*i - i) // 2 # get the current index's pentagonal number
        for Pj in ps:  # looking through the set of established pentagonal numbers
            if s-Pj in ps and s-2*Pj in ps: # seprately check the differencen and sum ( set[i]-set[j] , set[i]+set[j] )
                # s-2*Pj = s-Pj-Pj = s[+1] ,  s-Pj = s[+1]+Pj , with s[+1] being a pentagon number found later
    
                return s-2*Pj
        ps.add(s)

print ("Project Euler 44 Solution =", pe44() )
