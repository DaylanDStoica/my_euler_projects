# Euler Problem #44

#Pentagon numbers:
# P(n) = n*(3*n-1)/2 

# Pentagonal numbers are generated by the formula, 
# . The first ten pentagonal numbers are: 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, â€¦



# It can be seen that P4 + P7 = 22+70=92=P8
# . However, their difference, 70-22=48 
# , is not pentagonal.

# TASK: 
# Find the pair of pentagonal numbers, P(j) and P(k), 
# for which their sum and difference are pentagonal and    D = | Pk - Pj |  is minimised; 
# what is the value of  D ?

def get_penta_num ( num ):
    # return the pentagonal number generated from the given parameter
    return num*( 3*num - 1) / 2

from math import sqrt
def is_penta_num ( num):
    # check that the given parameter is pentagonal
    # method: invert the pentagonal equation, and if an integer comes out, is True
    # else: return False


    
    # Done: develop inverted formula, completed
    # from original   P(x) = (3x*x - x) / 2
    # inverse of Pentagonal number ( P^-1(x) ) = 1/6 * ( 1 +- sqrt ( 24*x + 1 ) )

    # with some insight, the domain of valid Pentagonal numbers is determined by the square-root portion of the inverse equation.
    # With the provided example numbers and testings, so long as the number inputed into the square-root expression results in a positive integer, the given number will be pentagonal.

    square_root_result = sqrt( 24*num + 1)

    if ( square_root_result.is_integer() and ( square_root_result >= 0) ): # the square root is positive integer
        # given number passes first verification, proceed to deeper steps
        # stopping now would include non-pentagonal numbers, that do not pass the fraction portion

        # TODO: expand this portion of if-blocks to include the entire inverse function
        return True

    return False


def test_main_part1():
    # test the first part: checking that the pentagonal equation functions work
    for x in range( 1, 100):
        temp_pent = get_penta_num(x)
        print(f" testing input integer {x} with given pentagonal output {temp_pent}")

        if ( is_penta_num( temp_pent) ):
            print( f" {temp_pent} is a pentagonal number")
        else:
            print(f" somehow (???)   {temp_pent} is not pentagonal, note this error")
            break

        
        if ( is_penta_num ( x)):
            print( f" {x} is a pentagonal number")
        else: 
            print(f" {x} is not pentagonal ")

        print("/n")

# test_main_part1()

# Part 2, building a list of pentagonal numbers, to be able to compare any two elements to find pentagonal sums and differences
def main_part2():
    count = 0
    x = 1
    penta_list = []
    while ( count < 100):
        # until the list is 100 pentagonal numbers long, find more pentagonal numbers
        if ( is_penta_num(x)):
            print(f" {x} is a pentagonal number, adding to the list")
            penta_list.append(x)
            count += 1
        x += 1
    print(f"the pentagonal list:  {penta_list}")


main_part2()